package com.UAP.Config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.UAP.Exception.GlobalExaptionHanlder;
import com.UAP.Filter.JwtFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	
	@Autowired
	private GlobalExaptionHanlder gloabalException;
	
	@Autowired
	private  JwtFilter filter;
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception 
	{
//		httpSecurity.csrf(cs-> cs.disable())
//					.cors(co-> co.disable())
//					.authorizeHttpRequests(req-> req
//					.requestMatchers("/auth/**").hasRole("ADMIN")		
//					.requestMatchers("/registeradmin" , "/registeruser" , "/auth/**")
//					.permitAll()
//					.anyRequest()
		//					.authenticated())
		//					.exceptionHandling(ex->ex.authenticationEntryPoint(gloabalException))
		//					.sessionManagement(s -> s.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
		//		httpSecurity.addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class);
		//		
		//		return httpSecurity.build();
				http.csrf(cs -> cs.disable()).cors(co -> co.disable())
				.authorizeHttpRequests(req -> req
		//		.requestMatchers("/auth/**").hasRole("ADMIN")		
<<<<<<< HEAD
				.requestMatchers("/auth/**").permitAll()	
=======
				.requestMatchers("/auth/**","/getAllPendingData","/getAllAcceptedData").permitAll()	
>>>>>>> dff409b081c0fb83fa0f66ccd3db8c839920ecbe
				.anyRequest()
				.authenticated())
				.exceptionHandling(ex -> ex.authenticationEntryPoint(gloabalException))
				.sessionManagement(s -> s.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
		http.addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class);
		return http.build();
	}
	

}
